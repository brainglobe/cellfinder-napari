# This workflows will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: tests

on: [push, pull_request]

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - name: checkout source
        uses: actions/checkout@v2
      - name: set up python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: set PY
        run: echo "PY=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
      - name: cache stuff
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.pythonLocation }}
            ~/.cache/pre-commit
          key: |
            pre-commit-${{ env.PY }}-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: install dependencies
        run: pip install pre-commit
      - name: Install pre-commit hooks
        run: pre-commit install
      # This will run on all files in the repo not just those that have been
      # committed. Once formatting has been applied once globally, from then on
      # the files being changed by pre-commit should be just those that are
      # being committed - provided that people are using the pre-commit hook to
      # format their code.
      - name: run pre-commit
        run: pre-commit run --all-files --color always

  manifest:
    needs: linting
    name: Check Manifest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install check-manifest
      - name: Check Manifest
        run: check-manifest

  test:
    name: ${{ matrix.platform }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.7, 3.8]

    steps:
      - uses: brainglobe/actions/test@main
        with:
          python-version: ${{ matrix.python-version }}

  deploy:
    # this will run when you have tagged a commit, starting with "v*"
    # and requires that you have put your twine API key in your
    # github secrets (see readme for details)
    needs: [test]
    runs-on: ubuntu-latest
    if: contains(github.ref, 'tags')
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U setuptools setuptools_scm wheel twine
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
        run: |
          git tag
          python setup.py sdist bdist_wheel
          twine upload dist/*
